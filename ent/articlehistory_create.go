// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ei-sugimoto/gortfolio/ent/article"
	"github.com/ei-sugimoto/gortfolio/ent/articlehistory"
)

// ArticleHistoryCreate is the builder for creating a ArticleHistory entity.
type ArticleHistoryCreate struct {
	config
	mutation *ArticleHistoryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ahc *ArticleHistoryCreate) SetCreatedAt(t time.Time) *ArticleHistoryCreate {
	ahc.mutation.SetCreatedAt(t)
	return ahc
}

// AddArticleIDs adds the "article" edge to the Article entity by IDs.
func (ahc *ArticleHistoryCreate) AddArticleIDs(ids ...int) *ArticleHistoryCreate {
	ahc.mutation.AddArticleIDs(ids...)
	return ahc
}

// AddArticle adds the "article" edges to the Article entity.
func (ahc *ArticleHistoryCreate) AddArticle(a ...*Article) *ArticleHistoryCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ahc.AddArticleIDs(ids...)
}

// Mutation returns the ArticleHistoryMutation object of the builder.
func (ahc *ArticleHistoryCreate) Mutation() *ArticleHistoryMutation {
	return ahc.mutation
}

// Save creates the ArticleHistory in the database.
func (ahc *ArticleHistoryCreate) Save(ctx context.Context) (*ArticleHistory, error) {
	return withHooks(ctx, ahc.sqlSave, ahc.mutation, ahc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ahc *ArticleHistoryCreate) SaveX(ctx context.Context) *ArticleHistory {
	v, err := ahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahc *ArticleHistoryCreate) Exec(ctx context.Context) error {
	_, err := ahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahc *ArticleHistoryCreate) ExecX(ctx context.Context) {
	if err := ahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahc *ArticleHistoryCreate) check() error {
	if _, ok := ahc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ArticleHistory.created_at"`)}
	}
	return nil
}

func (ahc *ArticleHistoryCreate) sqlSave(ctx context.Context) (*ArticleHistory, error) {
	if err := ahc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ahc.mutation.id = &_node.ID
	ahc.mutation.done = true
	return _node, nil
}

func (ahc *ArticleHistoryCreate) createSpec() (*ArticleHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ArticleHistory{config: ahc.config}
		_spec = sqlgraph.NewCreateSpec(articlehistory.Table, sqlgraph.NewFieldSpec(articlehistory.FieldID, field.TypeInt))
	)
	if value, ok := ahc.mutation.CreatedAt(); ok {
		_spec.SetField(articlehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ahc.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlehistory.ArticleTable,
			Columns: []string{articlehistory.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ArticleHistoryCreateBulk is the builder for creating many ArticleHistory entities in bulk.
type ArticleHistoryCreateBulk struct {
	config
	err      error
	builders []*ArticleHistoryCreate
}

// Save creates the ArticleHistory entities in the database.
func (ahcb *ArticleHistoryCreateBulk) Save(ctx context.Context) ([]*ArticleHistory, error) {
	if ahcb.err != nil {
		return nil, ahcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ahcb.builders))
	nodes := make([]*ArticleHistory, len(ahcb.builders))
	mutators := make([]Mutator, len(ahcb.builders))
	for i := range ahcb.builders {
		func(i int, root context.Context) {
			builder := ahcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ahcb *ArticleHistoryCreateBulk) SaveX(ctx context.Context) []*ArticleHistory {
	v, err := ahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahcb *ArticleHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcb *ArticleHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ahcb.Exec(ctx); err != nil {
		panic(err)
	}
}
