// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ei-sugimoto/gortfolio/ent/articlehistory"
)

// ArticleHistory is the model entity for the ArticleHistory schema.
type ArticleHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArticleHistoryQuery when eager-loading is set.
	Edges        ArticleHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArticleHistoryEdges holds the relations/edges for other nodes in the graph.
type ArticleHistoryEdges struct {
	// Article holds the value of the article edge.
	Article []*Article `json:"article,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ArticleOrErr returns the Article value or an error if the edge
// was not loaded in eager-loading.
func (e ArticleHistoryEdges) ArticleOrErr() ([]*Article, error) {
	if e.loadedTypes[0] {
		return e.Article, nil
	}
	return nil, &NotLoadedError{edge: "article"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArticleHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case articlehistory.FieldID:
			values[i] = new(sql.NullInt64)
		case articlehistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArticleHistory fields.
func (ah *ArticleHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case articlehistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ah.ID = int(value.Int64)
		case articlehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ah.CreatedAt = value.Time
			}
		default:
			ah.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArticleHistory.
// This includes values selected through modifiers, order, etc.
func (ah *ArticleHistory) Value(name string) (ent.Value, error) {
	return ah.selectValues.Get(name)
}

// QueryArticle queries the "article" edge of the ArticleHistory entity.
func (ah *ArticleHistory) QueryArticle() *ArticleQuery {
	return NewArticleHistoryClient(ah.config).QueryArticle(ah)
}

// Update returns a builder for updating this ArticleHistory.
// Note that you need to call ArticleHistory.Unwrap() before calling this method if this ArticleHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ah *ArticleHistory) Update() *ArticleHistoryUpdateOne {
	return NewArticleHistoryClient(ah.config).UpdateOne(ah)
}

// Unwrap unwraps the ArticleHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ah *ArticleHistory) Unwrap() *ArticleHistory {
	_tx, ok := ah.config.driver.(*txDriver)
	if !ok {
		panic("ent: ArticleHistory is not a transactional entity")
	}
	ah.config.driver = _tx.drv
	return ah
}

// String implements the fmt.Stringer.
func (ah *ArticleHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ArticleHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ah.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ah.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ArticleHistories is a parsable slice of ArticleHistory.
type ArticleHistories []*ArticleHistory
