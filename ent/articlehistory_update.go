// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ei-sugimoto/gortfolio/ent/article"
	"github.com/ei-sugimoto/gortfolio/ent/articlehistory"
	"github.com/ei-sugimoto/gortfolio/ent/predicate"
)

// ArticleHistoryUpdate is the builder for updating ArticleHistory entities.
type ArticleHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleHistoryMutation
}

// Where appends a list predicates to the ArticleHistoryUpdate builder.
func (ahu *ArticleHistoryUpdate) Where(ps ...predicate.ArticleHistory) *ArticleHistoryUpdate {
	ahu.mutation.Where(ps...)
	return ahu
}

// SetCreatedAt sets the "created_at" field.
func (ahu *ArticleHistoryUpdate) SetCreatedAt(t time.Time) *ArticleHistoryUpdate {
	ahu.mutation.SetCreatedAt(t)
	return ahu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahu *ArticleHistoryUpdate) SetNillableCreatedAt(t *time.Time) *ArticleHistoryUpdate {
	if t != nil {
		ahu.SetCreatedAt(*t)
	}
	return ahu
}

// AddArticleIDs adds the "article" edge to the Article entity by IDs.
func (ahu *ArticleHistoryUpdate) AddArticleIDs(ids ...int) *ArticleHistoryUpdate {
	ahu.mutation.AddArticleIDs(ids...)
	return ahu
}

// AddArticle adds the "article" edges to the Article entity.
func (ahu *ArticleHistoryUpdate) AddArticle(a ...*Article) *ArticleHistoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ahu.AddArticleIDs(ids...)
}

// Mutation returns the ArticleHistoryMutation object of the builder.
func (ahu *ArticleHistoryUpdate) Mutation() *ArticleHistoryMutation {
	return ahu.mutation
}

// ClearArticle clears all "article" edges to the Article entity.
func (ahu *ArticleHistoryUpdate) ClearArticle() *ArticleHistoryUpdate {
	ahu.mutation.ClearArticle()
	return ahu
}

// RemoveArticleIDs removes the "article" edge to Article entities by IDs.
func (ahu *ArticleHistoryUpdate) RemoveArticleIDs(ids ...int) *ArticleHistoryUpdate {
	ahu.mutation.RemoveArticleIDs(ids...)
	return ahu
}

// RemoveArticle removes "article" edges to Article entities.
func (ahu *ArticleHistoryUpdate) RemoveArticle(a ...*Article) *ArticleHistoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ahu.RemoveArticleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahu *ArticleHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ahu.sqlSave, ahu.mutation, ahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *ArticleHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *ArticleHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *ArticleHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahu *ArticleHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(articlehistory.Table, articlehistory.Columns, sqlgraph.NewFieldSpec(articlehistory.FieldID, field.TypeInt))
	if ps := ahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahu.mutation.CreatedAt(); ok {
		_spec.SetField(articlehistory.FieldCreatedAt, field.TypeTime, value)
	}
	if ahu.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlehistory.ArticleTable,
			Columns: []string{articlehistory.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahu.mutation.RemovedArticleIDs(); len(nodes) > 0 && !ahu.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlehistory.ArticleTable,
			Columns: []string{articlehistory.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahu.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlehistory.ArticleTable,
			Columns: []string{articlehistory.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ahu.mutation.done = true
	return n, nil
}

// ArticleHistoryUpdateOne is the builder for updating a single ArticleHistory entity.
type ArticleHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleHistoryMutation
}

// SetCreatedAt sets the "created_at" field.
func (ahuo *ArticleHistoryUpdateOne) SetCreatedAt(t time.Time) *ArticleHistoryUpdateOne {
	ahuo.mutation.SetCreatedAt(t)
	return ahuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahuo *ArticleHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *ArticleHistoryUpdateOne {
	if t != nil {
		ahuo.SetCreatedAt(*t)
	}
	return ahuo
}

// AddArticleIDs adds the "article" edge to the Article entity by IDs.
func (ahuo *ArticleHistoryUpdateOne) AddArticleIDs(ids ...int) *ArticleHistoryUpdateOne {
	ahuo.mutation.AddArticleIDs(ids...)
	return ahuo
}

// AddArticle adds the "article" edges to the Article entity.
func (ahuo *ArticleHistoryUpdateOne) AddArticle(a ...*Article) *ArticleHistoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ahuo.AddArticleIDs(ids...)
}

// Mutation returns the ArticleHistoryMutation object of the builder.
func (ahuo *ArticleHistoryUpdateOne) Mutation() *ArticleHistoryMutation {
	return ahuo.mutation
}

// ClearArticle clears all "article" edges to the Article entity.
func (ahuo *ArticleHistoryUpdateOne) ClearArticle() *ArticleHistoryUpdateOne {
	ahuo.mutation.ClearArticle()
	return ahuo
}

// RemoveArticleIDs removes the "article" edge to Article entities by IDs.
func (ahuo *ArticleHistoryUpdateOne) RemoveArticleIDs(ids ...int) *ArticleHistoryUpdateOne {
	ahuo.mutation.RemoveArticleIDs(ids...)
	return ahuo
}

// RemoveArticle removes "article" edges to Article entities.
func (ahuo *ArticleHistoryUpdateOne) RemoveArticle(a ...*Article) *ArticleHistoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ahuo.RemoveArticleIDs(ids...)
}

// Where appends a list predicates to the ArticleHistoryUpdate builder.
func (ahuo *ArticleHistoryUpdateOne) Where(ps ...predicate.ArticleHistory) *ArticleHistoryUpdateOne {
	ahuo.mutation.Where(ps...)
	return ahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahuo *ArticleHistoryUpdateOne) Select(field string, fields ...string) *ArticleHistoryUpdateOne {
	ahuo.fields = append([]string{field}, fields...)
	return ahuo
}

// Save executes the query and returns the updated ArticleHistory entity.
func (ahuo *ArticleHistoryUpdateOne) Save(ctx context.Context) (*ArticleHistory, error) {
	return withHooks(ctx, ahuo.sqlSave, ahuo.mutation, ahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *ArticleHistoryUpdateOne) SaveX(ctx context.Context) *ArticleHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *ArticleHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *ArticleHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahuo *ArticleHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ArticleHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(articlehistory.Table, articlehistory.Columns, sqlgraph.NewFieldSpec(articlehistory.FieldID, field.TypeInt))
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArticleHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articlehistory.FieldID)
		for _, f := range fields {
			if !articlehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != articlehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahuo.mutation.CreatedAt(); ok {
		_spec.SetField(articlehistory.FieldCreatedAt, field.TypeTime, value)
	}
	if ahuo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlehistory.ArticleTable,
			Columns: []string{articlehistory.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahuo.mutation.RemovedArticleIDs(); len(nodes) > 0 && !ahuo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlehistory.ArticleTable,
			Columns: []string{articlehistory.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahuo.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlehistory.ArticleTable,
			Columns: []string{articlehistory.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ahuo.mutation.done = true
	return _node, nil
}
